rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents { 
    function getEventDoc(eventType, eventId) { 
    	return get(/databases/$(database)/documents/$(eventType)/$(eventId)).data;
    }
    
    function getUserDetailedDoc(userId) { 
    	return get(/databases/$(database)/documents/userProfiles/$(userId)/detailedInfo/$(userId)).data;
    }
    
    function isUserExists(userId) {
    	return exists(get(/databases/$(database)/documents/userProfiles/$(userId)).data);
    }
    
    function isNotInBlockList(senderId, recipientId, action) {
    	let recipientDoc = getUserDetailedDoc(recipientId);
      return !(senderId in recipientDoc.blockedUsers) || (action == "REMOVE_FRIEND");
    }
    
    function isFreeSlot(eventType, eventId) {
    	let eventDoc = getEventDoc(eventType, eventId);
      let eventMaxUsers = eventDoc.eventMaxPerson;
      return eventMaxUsers == null && true || eventMaxUsers != null && eventDoc.eventParticipants + 1 <= eventMaxUsers;
    }
    
    function isUserInvitedOrHost(eventType, eventId, userId) {
      let eventDoc = getEventDoc(eventType, eventId);
      return (userId in eventDoc.invitedUsers || userId == eventDoc.hostId);
    }
  
    match /publicEvents/{eventId} {
      allow read: if request.auth != null;
      allow write: if request.resource.data.hostId == request.auth.uid;
      
      match /usersJoined/{userId} {
        allow read: if request.auth != null;
        allow delete, update: if userId == request.auth.uid;
        allow create: if userId == request.auth.uid && isFreeSlot('publicEvents', eventId);
    	}
    }  
    
    match /privateEvents/{eventId} {
      allow read: if request.auth.uid in request.resource.data.invitedUsers || request.resource.data.hostId == request.auth.uid;
      allow write: if request.resource.data.hostId == request.auth.uid;
      
      match /usersJoined/{userId} {
        allow read: if isUserInvitedOrHost('privateEvents', eventId, request.auth.uid);
        allow create: if userId == request.auth.uid && isFreeSlot('privateEvents', eventId) && isUserInvitedOrHost('privateEvents', eventId, request.auth.uid);
    		allow delete, update: if userId == request.auth.uid && isUserInvitedOrHost('privateEvents', eventId, request.auth.uid);
      }
    }
    
    match /userProfiles/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
      allow delete: if false;
      
      match /incomeRequests/{friendId} {
      	allow create, update: if request.auth != null && request.resource.data.senderId == request.auth.uid && isUserExists(userId) && isNotInBlockList(request.auth.uid, userId, request.resource.data.action);
        allow read, delete: if request.auth.uid == userId;
    	}
      
      match /outcomeRequests/{friendId} {
        allow read, write: if request.auth.uid == userId && isNotInBlockList(request.auth.uid, friendId, request.resource.data.action);
    	}
      
      match /detailedInfo/{userId} {
        allow read, create, update: if request.auth.uid == userId;
        allow delete: if false;
    	}
    }
  }
}